//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(NewNodeChecker.Database.LogDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsa872aa65688512f43878ed1042f06bfd8c25245865971801022b4cacf4a4168d))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsa872aa65688512f43878ed1042f06bfd8c25245865971801022b4cacf4a4168d : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "a872aa65688512f43878ed1042f06bfd8c25245865971801022b4cacf4a4168d"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ConfigConnectionStringLog")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.ConfigFileLog")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.WebSiteLog")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.ServerLog")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.HostsFileLog")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.InstalledAppLog")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.SqlTransResultLog")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.SqlConnectionDefination")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.DefinationSetting")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.WebSiteFileLog")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.ConfigIPLog")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.ConfigLinksDefinition")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.ConfigLinksLog")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.PortInfoDefination")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.PortResultLog")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.RunStepLog")
            {
                return GetView15();
            }

            if (extentName == "LogDbContext.ConfigConnectionStringLog")
            {
                return GetView16();
            }

            if (extentName == "LogDbContext.ConfigFileLogs")
            {
                return GetView17();
            }

            if (extentName == "LogDbContext.WebSiteLogs")
            {
                return GetView18();
            }

            if (extentName == "LogDbContext.ServerLogs")
            {
                return GetView19();
            }

            if (extentName == "LogDbContext.HostsFileLogs")
            {
                return GetView20();
            }

            if (extentName == "LogDbContext.InstalledAppsLogs")
            {
                return GetView21();
            }

            if (extentName == "LogDbContext.SqlTransResultLogs")
            {
                return GetView22();
            }

            if (extentName == "LogDbContext.SqlConnectionDefinations")
            {
                return GetView23();
            }

            if (extentName == "LogDbContext.DefinationSettings")
            {
                return GetView24();
            }

            if (extentName == "LogDbContext.WebSiteFileLogs")
            {
                return GetView25();
            }

            if (extentName == "LogDbContext.ConfigIPLog")
            {
                return GetView26();
            }

            if (extentName == "LogDbContext.ConfigLinksDefinition")
            {
                return GetView27();
            }

            if (extentName == "LogDbContext.ConfigLinksLog")
            {
                return GetView28();
            }

            if (extentName == "LogDbContext.PortInfoDefinations")
            {
                return GetView29();
            }

            if (extentName == "LogDbContext.PortResultLogs")
            {
                return GetView30();
            }

            if (extentName == "LogDbContext.RunStepLog")
            {
                return GetView31();
            }

            if (extentName == "CodeFirstDatabase.ConfigURLBridge")
            {
                return GetView32();
            }

            if (extentName == "LogDbContext.ConfigURLBridge")
            {
                return GetView33();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigConnectionStringLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigConnectionStringLog
        [CodeFirstDatabaseSchema.ConfigConnectionStringLog](T1.ConfigConnectionStringLog_Id, T1.ConfigConnectionStringLog_ConfigFileLogId, T1.ConfigConnectionStringLog_SqlConnectionDefinationId, T1.ConfigConnectionStringLog_ConnectionSting, T1.ConfigConnectionStringLog_RowVesion, T1.ConfigConnectionStringLog_EventDateTime, T1.ConfigConnectionStringLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigConnectionStringLog_Id, 
            T.ConfigFileLogId AS ConfigConnectionStringLog_ConfigFileLogId, 
            T.SqlConnectionDefinationId AS ConfigConnectionStringLog_SqlConnectionDefinationId, 
            T.ConnectionSting AS ConfigConnectionStringLog_ConnectionSting, 
            T.RowVesion AS ConfigConnectionStringLog_RowVesion, 
            T.EventDateTime AS ConfigConnectionStringLog_EventDateTime, 
            T.Exception AS ConfigConnectionStringLog_Exception, 
            True AS _from0
        FROM LogDbContext.ConfigConnectionStringLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigFileLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigFileLog
        [CodeFirstDatabaseSchema.ConfigFileLog](T1.ConfigFileLog_Id, T1.ConfigFileLog_WebSiteLogId, T1.ConfigFileLog_Type, T1.ConfigFileLog_ConfigFileName, T1.ConfigFileLog_ConfigFileContent, T1.ConfigFileLog_LastModificationDate, T1.ConfigFileLog_RowVesion, T1.ConfigFileLog_EventDateTime, T1.ConfigFileLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigFileLog_Id, 
            T.WebSiteLogId AS ConfigFileLog_WebSiteLogId, 
            T.Type AS ConfigFileLog_Type, 
            T.ConfigFileName AS ConfigFileLog_ConfigFileName, 
            T.ConfigFileContent AS ConfigFileLog_ConfigFileContent, 
            T.LastModificationDate AS ConfigFileLog_LastModificationDate, 
            T.RowVesion AS ConfigFileLog_RowVesion, 
            T.EventDateTime AS ConfigFileLog_EventDateTime, 
            T.Exception AS ConfigFileLog_Exception, 
            True AS _from0
        FROM LogDbContext.ConfigFileLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.WebSiteLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebSiteLog
        [CodeFirstDatabaseSchema.WebSiteLog](T1.WebSiteLog_Id, T1.WebSiteLog_AppPhysicalPath, T1.WebSiteLog_SiteName, T1.WebSiteLog_VirtualDirectoryName, T1.WebSiteLog_ServerLogId, T1.WebSiteLog_RowVesion, T1.WebSiteLog_EventDateTime, T1.WebSiteLog_Exception)
    FROM (
        SELECT 
            T.Id AS WebSiteLog_Id, 
            T.AppPhysicalPath AS WebSiteLog_AppPhysicalPath, 
            T.SiteName AS WebSiteLog_SiteName, 
            T.VirtualDirectoryName AS WebSiteLog_VirtualDirectoryName, 
            T.ServerLogId AS WebSiteLog_ServerLogId, 
            T.RowVesion AS WebSiteLog_RowVesion, 
            T.EventDateTime AS WebSiteLog_EventDateTime, 
            T.Exception AS WebSiteLog_Exception, 
            True AS _from0
        FROM LogDbContext.WebSiteLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ServerLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServerLog
        [CodeFirstDatabaseSchema.ServerLog](T1.ServerLog_Id, T1.ServerLog_MachineName, T1.ServerLog_Ip, T1.ServerLog_StartDateTime, T1.ServerLog_EndDateTime, T1.ServerLog_RowVesion, T1.ServerLog_EventDateTime, T1.ServerLog_Exception)
    FROM (
        SELECT 
            T.Id AS ServerLog_Id, 
            T.MachineName AS ServerLog_MachineName, 
            T.Ip AS ServerLog_Ip, 
            T.StartDateTime AS ServerLog_StartDateTime, 
            T.EndDateTime AS ServerLog_EndDateTime, 
            T.RowVesion AS ServerLog_RowVesion, 
            T.EventDateTime AS ServerLog_EventDateTime, 
            T.Exception AS ServerLog_Exception, 
            True AS _from0
        FROM LogDbContext.ServerLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.HostsFileLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing HostsFileLog
        [CodeFirstDatabaseSchema.HostsFileLog](T1.HostsFileLog_Id, T1.HostsFileLog_FileContent, T1.HostsFileLog_ServerLogId, T1.HostsFileLog_RowVesion, T1.HostsFileLog_EventDateTime, T1.HostsFileLog_Exception)
    FROM (
        SELECT 
            T.Id AS HostsFileLog_Id, 
            T.FileContent AS HostsFileLog_FileContent, 
            T.ServerLogId AS HostsFileLog_ServerLogId, 
            T.RowVesion AS HostsFileLog_RowVesion, 
            T.EventDateTime AS HostsFileLog_EventDateTime, 
            T.Exception AS HostsFileLog_Exception, 
            True AS _from0
        FROM LogDbContext.HostsFileLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.InstalledAppLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstalledAppLog
        [CodeFirstDatabaseSchema.InstalledAppLog](T1.InstalledAppLog_Id, T1.InstalledAppLog_DisplayName, T1.InstalledAppLog_DisplayVersion, T1.InstalledAppLog_InstallDate, T1.InstalledAppLog_InstallSource, T1.InstalledAppLog_ServerLogId, T1.InstalledAppLog_RowVesion, T1.InstalledAppLog_EventDateTime, T1.InstalledAppLog_Exception)
    FROM (
        SELECT 
            T.Id AS InstalledAppLog_Id, 
            T.DisplayName AS InstalledAppLog_DisplayName, 
            T.DisplayVersion AS InstalledAppLog_DisplayVersion, 
            T.InstallDate AS InstalledAppLog_InstallDate, 
            T.InstallSource AS InstalledAppLog_InstallSource, 
            T.ServerLogId AS InstalledAppLog_ServerLogId, 
            T.RowVesion AS InstalledAppLog_RowVesion, 
            T.EventDateTime AS InstalledAppLog_EventDateTime, 
            T.Exception AS InstalledAppLog_Exception, 
            True AS _from0
        FROM LogDbContext.InstalledAppsLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SqlTransResultLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SqlTransResultLog
        [CodeFirstDatabaseSchema.SqlTransResultLog](T1.SqlTransResultLog_Id, T1.SqlTransResultLog_SqlConnectionDefinationId, T1.SqlTransResultLog_RowsCount, T1.SqlTransResultLog_Status, T1.SqlTransResultLog_ServerLogId, T1.SqlTransResultLog_RowVesion, T1.SqlTransResultLog_EventDateTime, T1.SqlTransResultLog_Exception)
    FROM (
        SELECT 
            T.Id AS SqlTransResultLog_Id, 
            T.SqlConnectionDefinationId AS SqlTransResultLog_SqlConnectionDefinationId, 
            T.RowsCount AS SqlTransResultLog_RowsCount, 
            T.Status AS SqlTransResultLog_Status, 
            T.ServerLogId AS SqlTransResultLog_ServerLogId, 
            T.RowVesion AS SqlTransResultLog_RowVesion, 
            T.EventDateTime AS SqlTransResultLog_EventDateTime, 
            T.Exception AS SqlTransResultLog_Exception, 
            True AS _from0
        FROM LogDbContext.SqlTransResultLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SqlConnectionDefination.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SqlConnectionDefination
        [CodeFirstDatabaseSchema.SqlConnectionDefination](T1.SqlConnectionDefination_Id, T1.SqlConnectionDefination_SqlConnection, T1.SqlConnectionDefination_SqlStatment, T1.SqlConnectionDefination_Name, T1.SqlConnectionDefination_IsEnabled, T1.SqlConnectionDefination_DefinationSettingId)
    FROM (
        SELECT 
            T.Id AS SqlConnectionDefination_Id, 
            T.SqlConnection AS SqlConnectionDefination_SqlConnection, 
            T.SqlStatment AS SqlConnectionDefination_SqlStatment, 
            T.Name AS SqlConnectionDefination_Name, 
            T.IsEnabled AS SqlConnectionDefination_IsEnabled, 
            T.DefinationSettingId AS SqlConnectionDefination_DefinationSettingId, 
            True AS _from0
        FROM LogDbContext.SqlConnectionDefinations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DefinationSetting.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DefinationSetting
        [CodeFirstDatabaseSchema.DefinationSetting](T1.DefinationSetting_Id, T1.DefinationSetting_Name, T1.DefinationSetting_RowVesion, T1.DefinationSetting_EventDateTime, T1.DefinationSetting_Exception)
    FROM (
        SELECT 
            T.Id AS DefinationSetting_Id, 
            T.Name AS DefinationSetting_Name, 
            T.RowVesion AS DefinationSetting_RowVesion, 
            T.EventDateTime AS DefinationSetting_EventDateTime, 
            T.Exception AS DefinationSetting_Exception, 
            True AS _from0
        FROM LogDbContext.DefinationSettings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.WebSiteFileLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebSiteFileLog
        [CodeFirstDatabaseSchema.WebSiteFileLog](T1.WebSiteFileLog_Id, T1.WebSiteFileLog_WebSiteLogId, T1.WebSiteFileLog_PhysicalPath, T1.WebSiteFileLog_FileName, T1.WebSiteFileLog_Extension, T1.WebSiteFileLog_Size, T1.WebSiteFileLog_BuildNo, T1.WebSiteFileLog_LastModificationDate, T1.WebSiteFileLog_RowVesion, T1.WebSiteFileLog_EventDateTime, T1.WebSiteFileLog_Exception)
    FROM (
        SELECT 
            T.Id AS WebSiteFileLog_Id, 
            T.WebSiteLogId AS WebSiteFileLog_WebSiteLogId, 
            T.PhysicalPath AS WebSiteFileLog_PhysicalPath, 
            T.FileName AS WebSiteFileLog_FileName, 
            T.Extension AS WebSiteFileLog_Extension, 
            T.Size AS WebSiteFileLog_Size, 
            T.BuildNo AS WebSiteFileLog_BuildNo, 
            T.LastModificationDate AS WebSiteFileLog_LastModificationDate, 
            T.RowVesion AS WebSiteFileLog_RowVesion, 
            T.EventDateTime AS WebSiteFileLog_EventDateTime, 
            T.Exception AS WebSiteFileLog_Exception, 
            True AS _from0
        FROM LogDbContext.WebSiteFileLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigIPLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigIPLog
        [CodeFirstDatabaseSchema.ConfigIPLog](T1.ConfigIPLog_Id, T1.ConfigIPLog_ConfigFileLogId, T1.ConfigIPLog_IP, T1.ConfigIPLog_Key, T1.ConfigIPLog_RowVesion, T1.ConfigIPLog_EventDateTime, T1.ConfigIPLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigIPLog_Id, 
            T.ConfigFileLogId AS ConfigIPLog_ConfigFileLogId, 
            T.IP AS ConfigIPLog_IP, 
            T.[Key] AS ConfigIPLog_Key, 
            T.RowVesion AS ConfigIPLog_RowVesion, 
            T.EventDateTime AS ConfigIPLog_EventDateTime, 
            T.Exception AS ConfigIPLog_Exception, 
            True AS _from0
        FROM LogDbContext.ConfigIPLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigLinksDefinition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigLinksDefinition
        [CodeFirstDatabaseSchema.ConfigLinksDefinition](T1.ConfigLinksDefinition_Id, T1.ConfigLinksDefinition_Links, T1.ConfigLinksDefinition_Name, T1.ConfigLinksDefinition_IsEnabled, T1.ConfigLinksDefinition_DefinationSettingId)
    FROM (
        SELECT 
            T.Id AS ConfigLinksDefinition_Id, 
            T.Links AS ConfigLinksDefinition_Links, 
            T.Name AS ConfigLinksDefinition_Name, 
            T.IsEnabled AS ConfigLinksDefinition_IsEnabled, 
            T.DefinationSettingId AS ConfigLinksDefinition_DefinationSettingId, 
            True AS _from0
        FROM LogDbContext.ConfigLinksDefinition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigLinksLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigLinksLog
        [CodeFirstDatabaseSchema.ConfigLinksLog](T1.ConfigLinksLog_Id, T1.ConfigLinksLog_ConfigLinksDefinitionId, T1.ConfigLinksLog_Status, T1.ConfigLinksLog_ServerLogId, T1.ConfigLinksLog_RowVesion, T1.ConfigLinksLog_EventDateTime, T1.ConfigLinksLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigLinksLog_Id, 
            T.ConfigLinksDefinitionId AS ConfigLinksLog_ConfigLinksDefinitionId, 
            T.Status AS ConfigLinksLog_Status, 
            T.ServerLogId AS ConfigLinksLog_ServerLogId, 
            T.RowVesion AS ConfigLinksLog_RowVesion, 
            T.EventDateTime AS ConfigLinksLog_EventDateTime, 
            T.Exception AS ConfigLinksLog_Exception, 
            True AS _from0
        FROM LogDbContext.ConfigLinksLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PortInfoDefination.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortInfoDefination
        [CodeFirstDatabaseSchema.PortInfoDefination](T1.PortInfoDefination_Id, T1.PortInfoDefination_Ip4Address, T1.PortInfoDefination_PortNo, T1.PortInfoDefination_Name, T1.PortInfoDefination_IsEnabled, T1.PortInfoDefination_DefinationSettingId)
    FROM (
        SELECT 
            T.Id AS PortInfoDefination_Id, 
            T.Ip4Address AS PortInfoDefination_Ip4Address, 
            T.PortNo AS PortInfoDefination_PortNo, 
            T.Name AS PortInfoDefination_Name, 
            T.IsEnabled AS PortInfoDefination_IsEnabled, 
            T.DefinationSettingId AS PortInfoDefination_DefinationSettingId, 
            True AS _from0
        FROM LogDbContext.PortInfoDefinations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PortResultLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortResultLog
        [CodeFirstDatabaseSchema.PortResultLog](T1.PortResultLog_Id, T1.PortResultLog_PortId, T1.PortResultLog_IsOpened, T1.PortResultLog_ServerLogId, T1.PortResultLog_RowVesion, T1.PortResultLog_EventDateTime, T1.PortResultLog_Exception)
    FROM (
        SELECT 
            T.Id AS PortResultLog_Id, 
            T.PortId AS PortResultLog_PortId, 
            T.IsOpened AS PortResultLog_IsOpened, 
            T.ServerLogId AS PortResultLog_ServerLogId, 
            T.RowVesion AS PortResultLog_RowVesion, 
            T.EventDateTime AS PortResultLog_EventDateTime, 
            T.Exception AS PortResultLog_Exception, 
            True AS _from0
        FROM LogDbContext.PortResultLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RunStepLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RunStepLog
        [CodeFirstDatabaseSchema.RunStepLog](T1.RunStepLog_Id, T1.RunStepLog_StepName, T1.RunStepLog_StartDateTime, T1.RunStepLog_EndDateTime, T1.RunStepLog_ServerLogId, T1.RunStepLog_RowVesion, T1.RunStepLog_EventDateTime, T1.RunStepLog_Exception)
    FROM (
        SELECT 
            T.Id AS RunStepLog_Id, 
            T.StepName AS RunStepLog_StepName, 
            T.StartDateTime AS RunStepLog_StartDateTime, 
            T.EndDateTime AS RunStepLog_EndDateTime, 
            T.ServerLogId AS RunStepLog_ServerLogId, 
            T.RowVesion AS RunStepLog_RowVesion, 
            T.EventDateTime AS RunStepLog_EventDateTime, 
            T.Exception AS RunStepLog_Exception, 
            True AS _from0
        FROM LogDbContext.RunStepLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ConfigConnectionStringLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigConnectionStringLog
        [NewNodeChecker.Database.ConfigConnectionStringLog](T1.ConfigConnectionStringLog_Id, T1.ConfigConnectionStringLog_ConfigFileLogId, T1.ConfigConnectionStringLog_SqlConnectionDefinationId, T1.ConfigConnectionStringLog_ConnectionSting, T1.ConfigConnectionStringLog_RowVesion, T1.ConfigConnectionStringLog_EventDateTime, T1.ConfigConnectionStringLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigConnectionStringLog_Id, 
            T.ConfigFileLogId AS ConfigConnectionStringLog_ConfigFileLogId, 
            T.SqlConnectionDefinationId AS ConfigConnectionStringLog_SqlConnectionDefinationId, 
            T.ConnectionSting AS ConfigConnectionStringLog_ConnectionSting, 
            T.RowVesion AS ConfigConnectionStringLog_RowVesion, 
            T.EventDateTime AS ConfigConnectionStringLog_EventDateTime, 
            T.Exception AS ConfigConnectionStringLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.ConfigConnectionStringLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ConfigFileLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigFileLogs
        [NewNodeChecker.Database.ConfigFileLog](T1.ConfigFileLog_Id, T1.ConfigFileLog_WebSiteLogId, T1.ConfigFileLog_Type, T1.ConfigFileLog_ConfigFileName, T1.ConfigFileLog_ConfigFileContent, T1.ConfigFileLog_LastModificationDate, T1.ConfigFileLog_RowVesion, T1.ConfigFileLog_EventDateTime, T1.ConfigFileLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigFileLog_Id, 
            T.WebSiteLogId AS ConfigFileLog_WebSiteLogId, 
            T.Type AS ConfigFileLog_Type, 
            T.ConfigFileName AS ConfigFileLog_ConfigFileName, 
            T.ConfigFileContent AS ConfigFileLog_ConfigFileContent, 
            T.LastModificationDate AS ConfigFileLog_LastModificationDate, 
            T.RowVesion AS ConfigFileLog_RowVesion, 
            T.EventDateTime AS ConfigFileLog_EventDateTime, 
            T.Exception AS ConfigFileLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.ConfigFileLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.WebSiteLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebSiteLogs
        [NewNodeChecker.Database.WebSiteLog](T1.WebSiteLog_Id, T1.WebSiteLog_AppPhysicalPath, T1.WebSiteLog_SiteName, T1.WebSiteLog_VirtualDirectoryName, T1.WebSiteLog_ServerLogId, T1.WebSiteLog_RowVesion, T1.WebSiteLog_EventDateTime, T1.WebSiteLog_Exception)
    FROM (
        SELECT 
            T.Id AS WebSiteLog_Id, 
            T.AppPhysicalPath AS WebSiteLog_AppPhysicalPath, 
            T.SiteName AS WebSiteLog_SiteName, 
            T.VirtualDirectoryName AS WebSiteLog_VirtualDirectoryName, 
            T.ServerLogId AS WebSiteLog_ServerLogId, 
            T.RowVesion AS WebSiteLog_RowVesion, 
            T.EventDateTime AS WebSiteLog_EventDateTime, 
            T.Exception AS WebSiteLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.WebSiteLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ServerLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServerLogs
        [NewNodeChecker.Database.ServerLog](T1.ServerLog_Id, T1.ServerLog_MachineName, T1.ServerLog_Ip, T1.ServerLog_StartDateTime, T1.ServerLog_EndDateTime, T1.ServerLog_RowVesion, T1.ServerLog_EventDateTime, T1.ServerLog_Exception)
    FROM (
        SELECT 
            T.Id AS ServerLog_Id, 
            T.MachineName AS ServerLog_MachineName, 
            T.Ip AS ServerLog_Ip, 
            T.StartDateTime AS ServerLog_StartDateTime, 
            T.EndDateTime AS ServerLog_EndDateTime, 
            T.RowVesion AS ServerLog_RowVesion, 
            T.EventDateTime AS ServerLog_EventDateTime, 
            T.Exception AS ServerLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.ServerLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.HostsFileLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing HostsFileLogs
        [NewNodeChecker.Database.HostsFileLog](T1.HostsFileLog_Id, T1.HostsFileLog_FileContent, T1.HostsFileLog_ServerLogId, T1.HostsFileLog_RowVesion, T1.HostsFileLog_EventDateTime, T1.HostsFileLog_Exception)
    FROM (
        SELECT 
            T.Id AS HostsFileLog_Id, 
            T.FileContent AS HostsFileLog_FileContent, 
            T.ServerLogId AS HostsFileLog_ServerLogId, 
            T.RowVesion AS HostsFileLog_RowVesion, 
            T.EventDateTime AS HostsFileLog_EventDateTime, 
            T.Exception AS HostsFileLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.HostsFileLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.InstalledAppsLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InstalledAppsLogs
        [NewNodeChecker.Database.InstalledAppLog](T1.InstalledAppLog_Id, T1.InstalledAppLog_DisplayName, T1.InstalledAppLog_DisplayVersion, T1.InstalledAppLog_InstallDate, T1.InstalledAppLog_InstallSource, T1.InstalledAppLog_ServerLogId, T1.InstalledAppLog_RowVesion, T1.InstalledAppLog_EventDateTime, T1.InstalledAppLog_Exception)
    FROM (
        SELECT 
            T.Id AS InstalledAppLog_Id, 
            T.DisplayName AS InstalledAppLog_DisplayName, 
            T.DisplayVersion AS InstalledAppLog_DisplayVersion, 
            T.InstallDate AS InstalledAppLog_InstallDate, 
            T.InstallSource AS InstalledAppLog_InstallSource, 
            T.ServerLogId AS InstalledAppLog_ServerLogId, 
            T.RowVesion AS InstalledAppLog_RowVesion, 
            T.EventDateTime AS InstalledAppLog_EventDateTime, 
            T.Exception AS InstalledAppLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.InstalledAppLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.SqlTransResultLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SqlTransResultLogs
        [NewNodeChecker.Database.SqlTransResultLog](T1.SqlTransResultLog_Id, T1.SqlTransResultLog_SqlConnectionDefinationId, T1.SqlTransResultLog_RowsCount, T1.SqlTransResultLog_Status, T1.SqlTransResultLog_ServerLogId, T1.SqlTransResultLog_RowVesion, T1.SqlTransResultLog_EventDateTime, T1.SqlTransResultLog_Exception)
    FROM (
        SELECT 
            T.Id AS SqlTransResultLog_Id, 
            T.SqlConnectionDefinationId AS SqlTransResultLog_SqlConnectionDefinationId, 
            T.RowsCount AS SqlTransResultLog_RowsCount, 
            T.Status AS SqlTransResultLog_Status, 
            T.ServerLogId AS SqlTransResultLog_ServerLogId, 
            T.RowVesion AS SqlTransResultLog_RowVesion, 
            T.EventDateTime AS SqlTransResultLog_EventDateTime, 
            T.Exception AS SqlTransResultLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.SqlTransResultLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.SqlConnectionDefinations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SqlConnectionDefinations
        [NewNodeChecker.Database.SqlConnectionDefination](T1.SqlConnectionDefination_Id, T1.SqlConnectionDefination_SqlConnection, T1.SqlConnectionDefination_SqlStatment, T1.SqlConnectionDefination_Name, T1.SqlConnectionDefination_IsEnabled, T1.SqlConnectionDefination_DefinationSettingId)
    FROM (
        SELECT 
            T.Id AS SqlConnectionDefination_Id, 
            T.SqlConnection AS SqlConnectionDefination_SqlConnection, 
            T.SqlStatment AS SqlConnectionDefination_SqlStatment, 
            T.Name AS SqlConnectionDefination_Name, 
            T.IsEnabled AS SqlConnectionDefination_IsEnabled, 
            T.DefinationSettingId AS SqlConnectionDefination_DefinationSettingId, 
            True AS _from0
        FROM CodeFirstDatabase.SqlConnectionDefination AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.DefinationSettings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DefinationSettings
        [NewNodeChecker.Database.DefinationSetting](T1.DefinationSetting_Id, T1.DefinationSetting_Name, T1.DefinationSetting_RowVesion, T1.DefinationSetting_EventDateTime, T1.DefinationSetting_Exception)
    FROM (
        SELECT 
            T.Id AS DefinationSetting_Id, 
            T.Name AS DefinationSetting_Name, 
            T.RowVesion AS DefinationSetting_RowVesion, 
            T.EventDateTime AS DefinationSetting_EventDateTime, 
            T.Exception AS DefinationSetting_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.DefinationSetting AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.WebSiteFileLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WebSiteFileLogs
        [NewNodeChecker.Database.WebSiteFileLog](T1.WebSiteFileLog_Id, T1.WebSiteFileLog_WebSiteLogId, T1.WebSiteFileLog_PhysicalPath, T1.WebSiteFileLog_FileName, T1.WebSiteFileLog_Extension, T1.WebSiteFileLog_Size, T1.WebSiteFileLog_BuildNo, T1.WebSiteFileLog_LastModificationDate, T1.WebSiteFileLog_RowVesion, T1.WebSiteFileLog_EventDateTime, T1.WebSiteFileLog_Exception)
    FROM (
        SELECT 
            T.Id AS WebSiteFileLog_Id, 
            T.WebSiteLogId AS WebSiteFileLog_WebSiteLogId, 
            T.PhysicalPath AS WebSiteFileLog_PhysicalPath, 
            T.FileName AS WebSiteFileLog_FileName, 
            T.Extension AS WebSiteFileLog_Extension, 
            T.Size AS WebSiteFileLog_Size, 
            T.BuildNo AS WebSiteFileLog_BuildNo, 
            T.LastModificationDate AS WebSiteFileLog_LastModificationDate, 
            T.RowVesion AS WebSiteFileLog_RowVesion, 
            T.EventDateTime AS WebSiteFileLog_EventDateTime, 
            T.Exception AS WebSiteFileLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.WebSiteFileLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ConfigIPLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigIPLog
        [NewNodeChecker.Database.ConfigIPLog](T1.ConfigIPLog_Id, T1.ConfigIPLog_ConfigFileLogId, T1.ConfigIPLog_IP, T1.ConfigIPLog_Key, T1.ConfigIPLog_RowVesion, T1.ConfigIPLog_EventDateTime, T1.ConfigIPLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigIPLog_Id, 
            T.ConfigFileLogId AS ConfigIPLog_ConfigFileLogId, 
            T.IP AS ConfigIPLog_IP, 
            T.[Key] AS ConfigIPLog_Key, 
            T.RowVesion AS ConfigIPLog_RowVesion, 
            T.EventDateTime AS ConfigIPLog_EventDateTime, 
            T.Exception AS ConfigIPLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.ConfigIPLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ConfigLinksDefinition.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigLinksDefinition
        [NewNodeChecker.Database.ConfigLinksDefinition](T1.ConfigLinksDefinition_Id, T1.ConfigLinksDefinition_Links, T1.ConfigLinksDefinition_Name, T1.ConfigLinksDefinition_IsEnabled, T1.ConfigLinksDefinition_DefinationSettingId)
    FROM (
        SELECT 
            T.Id AS ConfigLinksDefinition_Id, 
            T.Links AS ConfigLinksDefinition_Links, 
            T.Name AS ConfigLinksDefinition_Name, 
            T.IsEnabled AS ConfigLinksDefinition_IsEnabled, 
            T.DefinationSettingId AS ConfigLinksDefinition_DefinationSettingId, 
            True AS _from0
        FROM CodeFirstDatabase.ConfigLinksDefinition AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ConfigLinksLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigLinksLog
        [NewNodeChecker.Database.ConfigLinksLog](T1.ConfigLinksLog_Id, T1.ConfigLinksLog_ConfigLinksDefinitionId, T1.ConfigLinksLog_Status, T1.ConfigLinksLog_ServerLogId, T1.ConfigLinksLog_RowVesion, T1.ConfigLinksLog_EventDateTime, T1.ConfigLinksLog_Exception)
    FROM (
        SELECT 
            T.Id AS ConfigLinksLog_Id, 
            T.ConfigLinksDefinitionId AS ConfigLinksLog_ConfigLinksDefinitionId, 
            T.Status AS ConfigLinksLog_Status, 
            T.ServerLogId AS ConfigLinksLog_ServerLogId, 
            T.RowVesion AS ConfigLinksLog_RowVesion, 
            T.EventDateTime AS ConfigLinksLog_EventDateTime, 
            T.Exception AS ConfigLinksLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.ConfigLinksLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.PortInfoDefinations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortInfoDefinations
        [NewNodeChecker.Database.PortInfoDefination](T1.PortInfoDefination_Id, T1.PortInfoDefination_Ip4Address, T1.PortInfoDefination_PortNo, T1.PortInfoDefination_Name, T1.PortInfoDefination_IsEnabled, T1.PortInfoDefination_DefinationSettingId)
    FROM (
        SELECT 
            T.Id AS PortInfoDefination_Id, 
            T.Ip4Address AS PortInfoDefination_Ip4Address, 
            T.PortNo AS PortInfoDefination_PortNo, 
            T.Name AS PortInfoDefination_Name, 
            T.IsEnabled AS PortInfoDefination_IsEnabled, 
            T.DefinationSettingId AS PortInfoDefination_DefinationSettingId, 
            True AS _from0
        FROM CodeFirstDatabase.PortInfoDefination AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.PortResultLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PortResultLogs
        [NewNodeChecker.Database.PortResultLog](T1.PortResultLog_Id, T1.PortResultLog_PortId, T1.PortResultLog_IsOpened, T1.PortResultLog_ServerLogId, T1.PortResultLog_RowVesion, T1.PortResultLog_EventDateTime, T1.PortResultLog_Exception)
    FROM (
        SELECT 
            T.Id AS PortResultLog_Id, 
            T.PortId AS PortResultLog_PortId, 
            T.IsOpened AS PortResultLog_IsOpened, 
            T.ServerLogId AS PortResultLog_ServerLogId, 
            T.RowVesion AS PortResultLog_RowVesion, 
            T.EventDateTime AS PortResultLog_EventDateTime, 
            T.Exception AS PortResultLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.PortResultLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.RunStepLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RunStepLog
        [NewNodeChecker.Database.RunStepLog](T1.RunStepLog_Id, T1.RunStepLog_StepName, T1.RunStepLog_StartDateTime, T1.RunStepLog_EndDateTime, T1.RunStepLog_ServerLogId, T1.RunStepLog_RowVesion, T1.RunStepLog_EventDateTime, T1.RunStepLog_Exception)
    FROM (
        SELECT 
            T.Id AS RunStepLog_Id, 
            T.StepName AS RunStepLog_StepName, 
            T.StartDateTime AS RunStepLog_StartDateTime, 
            T.EndDateTime AS RunStepLog_EndDateTime, 
            T.ServerLogId AS RunStepLog_ServerLogId, 
            T.RowVesion AS RunStepLog_RowVesion, 
            T.EventDateTime AS RunStepLog_EventDateTime, 
            T.Exception AS RunStepLog_Exception, 
            True AS _from0
        FROM CodeFirstDatabase.RunStepLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConfigURLBridge.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigURLBridge
        [CodeFirstDatabaseSchema.ConfigURLBridge](T1.ConfigURLBridge_Id, T1.ConfigURLBridge_ConfigId, T1.ConfigURLBridge_URLId)
    FROM (
        SELECT 
            T.Id AS ConfigURLBridge_Id, 
            T.ConfigId AS ConfigURLBridge_ConfigId, 
            T.URLId AS ConfigURLBridge_URLId, 
            True AS _from0
        FROM LogDbContext.ConfigURLBridge AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for LogDbContext.ConfigURLBridge.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConfigURLBridge
        [NewNodeChecker.Database.ConfigURLBridge](T1.ConfigURLBridge_Id, T1.ConfigURLBridge_ConfigId, T1.ConfigURLBridge_URLId)
    FROM (
        SELECT 
            T.Id AS ConfigURLBridge_Id, 
            T.ConfigId AS ConfigURLBridge_ConfigId, 
            T.URLId AS ConfigURLBridge_URLId, 
            True AS _from0
        FROM CodeFirstDatabase.ConfigURLBridge AS T
    ) AS T1");
        }
    }
}
